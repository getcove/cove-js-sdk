name: Release

on:
  push:
    branches:
      - develop
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  # Stage 1: Create Release PR when pushing to develop
  release-pr:
    name: Create Release PR
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Create Version PR
        uses: changesets/action@v1
        with:
          branch: main  # Target main branch for the PR
          commit: "chore: version packages"
          title: "chore: version packages"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Stage 2: Publish when merging to main
  publish:
    name: Publish to npm
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # For creating tags and releases
      id-token: write  # For npm Provenance
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Build Packages
        run: pnpm build
      - name: Publish to npm with Provenance
        id: changesets
        run: pnpm changeset publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract Published Packages
        id: extract
        if: steps.changesets.outcome == 'success'
        run: |
          echo "Extracting published packages info..."
          # Get the latest tag created by changeset
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          # Check if a tag was created
          if [ -n "$LATEST_TAG" ]; then
            echo "published=true" >> $GITHUB_OUTPUT
          else
            echo "published=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        if: steps.extract.outputs.published == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.extract.outputs.tag }}
          name: ${{ steps.extract.outputs.tag }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Stage 3: Sync main back to develop after successful publish
  sync-develop:
    name: Sync main back to develop
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [publish]  # Only run after successful publish
    permissions:
      contents: write  # Needs permission to push changes
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history for proper merge

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Sync branches
        run: |
          git checkout develop
          git pull origin develop
          git merge main --no-ff -m "chore: sync main back to develop"
          git push origin develop